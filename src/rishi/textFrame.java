/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package rishi;

import java.awt.GraphicsEnvironment;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import javax.swing.JFrame;

/**
 *
 * @author SACHIN MISHRA
 */
public class textFrame extends javax.swing.JFrame {

    /**
     * Creates new form textFrame
     */
    public textFrame() {
        initComponents();
        maximizeWindow();
    }
  private void maximizeWindow() {
        GraphicsEnvironment env
                = GraphicsEnvironment.getLocalGraphicsEnvironment();
        this.setMaximizedBounds(env.getMaximumWindowBounds());
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setForeground(new java.awt.Color(0, 0, 0));

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        jButton1.setBackground(new java.awt.Color(255, 0, 0));
        jButton1.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Write");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 0, 0));
        jButton2.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Clear Text");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 231, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addGap(54, 54, 54)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
      textArea.setText("");
      textArea.requestFocus();
    }//GEN-LAST:event_jButton2MouseClicked
 private  void typeChar(Robot robot, char c) {
        try {
            boolean shiftNeeded = false;
            int keyCode = 0;

            switch (c) {
                // Letters
                case 'a': keyCode = KeyEvent.VK_A; break;
                case 'b': keyCode = KeyEvent.VK_B; break;
                case 'c': keyCode = KeyEvent.VK_C; break;
                case 'd': keyCode = KeyEvent.VK_D; break;
                case 'e': keyCode = KeyEvent.VK_E; break;
                case 'f': keyCode = KeyEvent.VK_F; break;
                case 'g': keyCode = KeyEvent.VK_G; break;
                case 'h': keyCode = KeyEvent.VK_H; break;
                case 'i': keyCode = KeyEvent.VK_I; break;
                case 'j': keyCode = KeyEvent.VK_J; break;
                case 'k': keyCode = KeyEvent.VK_K; break;
                case 'l': keyCode = KeyEvent.VK_L; break;
                case 'm': keyCode = KeyEvent.VK_M; break;
                case 'n': keyCode = KeyEvent.VK_N; break;
                case 'o': keyCode = KeyEvent.VK_O; break;
                case 'p': keyCode = KeyEvent.VK_P; break;
                case 'q': keyCode = KeyEvent.VK_Q; break;
                case 'r': keyCode = KeyEvent.VK_R; break;
                case 's': keyCode = KeyEvent.VK_S; break;
                case 't': keyCode = KeyEvent.VK_T; break;
                case 'u': keyCode = KeyEvent.VK_U; break;
                case 'v': keyCode = KeyEvent.VK_V; break;
                case 'w': keyCode = KeyEvent.VK_W; break;
                case 'x': keyCode = KeyEvent.VK_X; break;
                case 'y': keyCode = KeyEvent.VK_Y; break;
                case 'z': keyCode = KeyEvent.VK_Z; break;

                // Uppercase letters
                case 'A': keyCode = KeyEvent.VK_A; shiftNeeded = true; break;
                case 'B': keyCode = KeyEvent.VK_B; shiftNeeded = true; break;
                case 'C': keyCode = KeyEvent.VK_C; shiftNeeded = true; break;
                case 'D': keyCode = KeyEvent.VK_D; shiftNeeded = true; break;
                case 'E': keyCode = KeyEvent.VK_E; shiftNeeded = true; break;
                case 'F': keyCode = KeyEvent.VK_F; shiftNeeded = true; break;
                case 'G': keyCode = KeyEvent.VK_G; shiftNeeded = true; break;
                case 'H': keyCode = KeyEvent.VK_H; shiftNeeded = true; break;
                case 'I': keyCode = KeyEvent.VK_I; shiftNeeded = true; break;
                case 'J': keyCode = KeyEvent.VK_J; shiftNeeded = true; break;
                case 'K': keyCode = KeyEvent.VK_K; shiftNeeded = true; break;
                case 'L': keyCode = KeyEvent.VK_L; shiftNeeded = true; break;
                case 'M': keyCode = KeyEvent.VK_M; shiftNeeded = true; break;
                case 'N': keyCode = KeyEvent.VK_N; shiftNeeded = true; break;
                case 'O': keyCode = KeyEvent.VK_O; shiftNeeded = true; break;
                case 'P': keyCode = KeyEvent.VK_P; shiftNeeded = true; break;
                case 'Q': keyCode = KeyEvent.VK_Q; shiftNeeded = true; break;
                case 'R': keyCode = KeyEvent.VK_R; shiftNeeded = true; break;
                case 'S': keyCode = KeyEvent.VK_S; shiftNeeded = true; break;
                case 'T': keyCode = KeyEvent.VK_T; shiftNeeded = true; break;
                case 'U': keyCode = KeyEvent.VK_U; shiftNeeded = true; break;
                case 'V': keyCode = KeyEvent.VK_V; shiftNeeded = true; break;
                case 'W': keyCode = KeyEvent.VK_W; shiftNeeded = true; break;
                case 'X': keyCode = KeyEvent.VK_X; shiftNeeded = true; break;
                case 'Y': keyCode = KeyEvent.VK_Y; shiftNeeded = true; break;
                case 'Z': keyCode = KeyEvent.VK_Z; shiftNeeded = true; break;

                // Digits
                case '0': keyCode = KeyEvent.VK_0; break;
                case '1': keyCode = KeyEvent.VK_1; break;
                case '2': keyCode = KeyEvent.VK_2; break;
                case '3': keyCode = KeyEvent.VK_3; break;
                case '4': keyCode = KeyEvent.VK_4; break;
                case '5': keyCode = KeyEvent.VK_5; break;
                case '6': keyCode = KeyEvent.VK_6; break;
                case '7': keyCode = KeyEvent.VK_7; break;
                case '8': keyCode = KeyEvent.VK_8; break;
                case '9': keyCode = KeyEvent.VK_9; break;

                // Symbols requiring SHIFT
                case '!': keyCode = KeyEvent.VK_1; shiftNeeded = true; break;
                case '@': keyCode = KeyEvent.VK_2; shiftNeeded = true; break;
                case '#': keyCode = KeyEvent.VK_3; shiftNeeded = true; break;
                case '$': keyCode = KeyEvent.VK_4; shiftNeeded = true; break;
                case '%': keyCode = KeyEvent.VK_5; shiftNeeded = true; break;
                case '^': keyCode = KeyEvent.VK_6; shiftNeeded = true; break;
                case '&': keyCode = KeyEvent.VK_7; shiftNeeded = true; break;
                case '*': keyCode = KeyEvent.VK_8; shiftNeeded = true; break;
                case '(': keyCode = KeyEvent.VK_9; shiftNeeded = true; break;
                case ')': keyCode = KeyEvent.VK_0; shiftNeeded = true; break;

                // Punctuation and others
                case ' ': keyCode = KeyEvent.VK_SPACE; break;
                 case '\n': keyCode = KeyEvent.VK_ENTER; break;
                case '.': keyCode = KeyEvent.VK_PERIOD; break;
                case ',': keyCode = KeyEvent.VK_COMMA; break;
                case ';': keyCode = KeyEvent.VK_SEMICOLON; break;
                case ':': keyCode = KeyEvent.VK_SEMICOLON; shiftNeeded = true; break;
                case '\'': keyCode = KeyEvent.VK_QUOTE; break;
                case '"': keyCode = KeyEvent.VK_QUOTE; shiftNeeded = true; break;
                case '[': keyCode = KeyEvent.VK_OPEN_BRACKET; break;
                case ']': keyCode = KeyEvent.VK_CLOSE_BRACKET; break;
                case '{': keyCode = KeyEvent.VK_OPEN_BRACKET; shiftNeeded = true; break;
                case '}': keyCode = KeyEvent.VK_CLOSE_BRACKET; shiftNeeded = true; break;
                case '\\': keyCode = KeyEvent.VK_BACK_SLASH; break;
                case '|': keyCode = KeyEvent.VK_BACK_SLASH; shiftNeeded = true; break;
                case '/': keyCode = KeyEvent.VK_SLASH; break;
                case '?': keyCode = KeyEvent.VK_SLASH; shiftNeeded = true; break;
                case '-': keyCode = KeyEvent.VK_MINUS; break;
                case '_': keyCode = KeyEvent.VK_MINUS; shiftNeeded = true; break;
                case '=': keyCode = KeyEvent.VK_EQUALS; break;
                case '+': keyCode = KeyEvent.VK_EQUALS; shiftNeeded = true; break;
                case '`': keyCode = KeyEvent.VK_BACK_QUOTE; break;
                case '~': keyCode = KeyEvent.VK_BACK_QUOTE; shiftNeeded = true; break;

                default:
                    System.out.println("Unsupported character: " + c);
                    return;
            }
            
            
            if (shiftNeeded) robot.keyPress(KeyEvent.VK_SHIFT);
            robot.keyPress(keyCode);
            robot.keyRelease(keyCode);
            if (shiftNeeded) robot.keyRelease(KeyEvent.VK_SHIFT);

        } catch (Exception e) {
            e.printStackTrace();
        }
 }
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
          try{
              boolean bool=true;
              String input = textArea.getText();
            String[] lines = input.split("\\R"); // keeps lines
            Robot r=new Robot();
      for(String s:lines){
          char [] cs=s.toCharArray();
          for(char c:cs){
              if(bool){
                  Thread.sleep(2500);  
                  bool=false;
                  System.out.println("end");
              }else{
               Thread.sleep(200); 
              }
            typeChar( r,  c);
            
          }
        typeChar( r,  '\n');
      }
         
          }catch(Exception e){
              e.printStackTrace();
          }
         

           
    }//GEN-LAST:event_jButton1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(textFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(textFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(textFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(textFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new textFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
